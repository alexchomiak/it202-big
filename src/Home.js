
import React, { Component } from 'react'
import {Redirect} from 'react-router-dom'
import Spotify from 'spotify-web-api-js'
var spotifyApi = new Spotify()

import ProgressBar from 'react-bootstrap/ProgressBar';
import axios from 'axios'

const queryString = require('query-string')

const uuid = require('uuid/v4')
const clientToken = "d1a2f3a8c7b0428ab9c14b1c175cbc69"

export default class Home extends Component {
    loginToSpotify = () => {
        return (<p> Logging in </p>)
    }

    state = {
        me: {},
        imgSrc: "",
        tracksQuery: [],
        progress: {
            value: 100,
            max: 100
        },
        loginURL: null
    }


    componentDidMount() {
        if(this.props.userCode === null) {
            var url = "https://accounts.spotify.com/authorize?"
            
            if (process.env.PUBLIC_URL === "") {
                //url = "http%3A%2F%2Flocalhost:3000%2Fcallback"
                url += queryString.stringify({
                    redirect_uri: "http://localhost:3000",
                    response_type: "token",
                    client_id: clientToken,
                    scope:"user-read-private user-read-email playlist-modify-public playlist-modify-private ugc-image-upload",
                    state: "123"
                })
              
             } 
             else {
                url += queryString.stringify({
                    redirect_uri: "https://alexchomiak.github.io/it202-big",
                    response_type: "token",
                    client_id: clientToken,
                    scope:"user-read-private user-read-email playlist-modify-public playlist-modify-private ugc-image-upload",
                    state: "123"
                })

           
             } 


     

            var loginURL = url;
            this.setState({loginURL})
           
    
        }
       

        if(this.props.userCode !== null) {
            spotifyApi.setAccessToken(this.props.userCode.access_token)

            spotifyApi.getMe().then((me) => {
                this.setState(() => ({
                    me
                }))

                console.log(me.id)

                console.log("attempting playlist creation -------")
                
                

                
                console.log("------------------------------------")

            } )

            console.log('spotify loaded')
            console.log(this.state.username)

            spotifyApi.getArtist()
       
            

            spotifyApi.getAlbum('0y4nzndpCMRS5wj3lkWl8A').then((album) => {
                //console.log(album)
                this.setState({imgSrc: album.images[2].url})
            })
        

            spotifyApi.getArtist("3ddT1Q3KQAm1G7UcIfz5KJ").then((res) => {
                console.log(res)
            })
           
        }
       
    }


    generatePlayListFromTracks = (tracksMap, playlistName) => {
        var name = "'" + playlistName + "' playlist (SpotiBuddi)"
        spotifyApi.createPlaylist(this.state.me.id,{name,public: true ,description: "This playlist was generated by SpotiBuddi, a playlist generating application built by Alex Chomiak. SpotiBuddi takes in certain keywords, searches Spotify for the top 500 playlists containing that keyword, then curates a playlist from the songs that occur most in each of those playlists. Try it out! :)"}).then((playlist) => {
            const id = playlist.id
            spotifyApi.uploadCustomPlaylistCoverImage(id,base64cover)
            
            let trackIDs = Array.from(tracksMap.keys())
            
            let uploadGroups = trackIDs.map((e,i) => {
                return i % 100 === 0 ? trackIDs.slice(i, i + 100) : null
            }).filter( (e) => {
                return e
            })

            var IDs = []
           
            uploadGroups[0].forEach((song) => {
                var ID = song.split(":")[2]
                IDs.push(ID);
            })
            
            

            spotifyApi.addTracksToPlaylist(id,uploadGroups[0])

            console.log(uploadGroups[0][0])

            
            
        })
    }

    createPlaylistFromTopTrackFrequencies = async (playlistName,numberOfPlaylists) => {
        return this.getPlaylists(playlistName,numberOfPlaylists).then((res) => {

            var doStuff = async () => {
                let playlists = res;
                var promises = []    
                var playlistTracks = []
                const delay = (interval) => new Promise(resolve => setTimeout(resolve, interval));

                for(var i = 0; i < playlists.length; i++) {
                    var playlist = playlists[i];
                    await this.setState( () => ({
                        progress: {
                            value: i + 1,
                            max: playlists.length
                        }
                    }))
                    await delay(125)
                    promises.push(spotifyApi.getPlaylistTracks(playlist.id).then((res) => {
                        playlistTracks = [...playlistTracks, ...res.items ]
                        console.log(playlistTracks)
                    }, async () => {
                        await delay(125)
                        i--;
                    }))
                    
                }
                

    
                return Promise.all(promises).then(() => {
                    var arrayOfPlaylistTracks = Array.from(playlistTracks, item => item.track)

                    var freqs = new Map()
                    var uriToTrack = new Map();
                    console.log(arrayOfPlaylistTracks)
                    arrayOfPlaylistTracks.forEach(track => {
                            if(track === null || track.uri === null) return
                            if(freqs.get(track.uri) === undefined) {
                                freqs.set(track.uri,1)
                            }
                            else freqs.set(track.uri,freqs.get(track.uri) + 1)

                            if(uriToTrack.get(track.uri) === undefined) uriToTrack.set(track.uri,track)

                        
                    })

                    var mapAsc = new Map([...freqs.entries()].sort((a,b) => {
                        return a[1] < b[1] ? 1: a[1] > b[1] ? -1 : 0
                    }));

                    this.generatePlayListFromTracks(mapAsc, playlistName)

                    return mapAsc
                    
                })
            }

            return doStuff()
            
        })
    }

    getPlaylists = async (name,limit) => {
        var initialValue = 0;
        var promises = []
        var list = [];

        for(var i = 0; i < limit; i += 50){
            promises.push( spotifyApi.searchPlaylists(name,{limit: 50,offset: i}).then((res) => {
                list = [...list, ...res.playlists.items]
            }))
        }
       

        return Promise.all(promises).then(() => {
            return list
        })
    }

    handleSubmit = (event) => {
        event.preventDefault();
        if(this.state.progress.value != this.state.progress.max) return

        this.createPlaylistFromTopTrackFrequencies(event.target.keyword.value,250)
    }



    render() {
        if(this.state.loginURL !== null && this.props.userCode === null) window.location.href = this.state.loginURL


    return (
        
        
        <div className="App">
    
        { (this.props.userCode !== null) ?
          (<div className="home">
            <p>Hello {this.state.me.display_name} </p>
            <p> Spotify {this.state.me.product} member</p>
            <p>Enter a keyword to build a 100 song spotify playlist corresponding to that keyword</p>
            <form onSubmit={this.handleSubmit}>
                <input className="textbox" name="keyword" type="text" onChange={this.handleChange}></input>
            </form>
            <ProgressBar variant='success' style={{width: '50rem',margin: '1rem auto'}} now={ (this.state.progress.value / this.state.progress.max) * 100 } />


            {this.state.tracksQuery.map((track,index) => {
            return (<div style={{display:"flex",justifyContent:"center",margin:"2rem 1rem"}}> 
            {(track.album !== null && track.album.images !== null && track.album.images.length > 2) ? ( <img src={track.album.images[2].url}/>) : (<h3>No Album cover</h3>)}
               
                <p> {track.name}</p>
            </div>)
            })}

          </div>)
          : <div className="failure">
                logging in
          </div>
        }
      </div>

    )
  }
}

        
    